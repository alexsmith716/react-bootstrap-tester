
// Isomorphic:
//      (able to render both on the client and the server)
//
// Isomorphic Benefits:
//      1) search engines able to index your page
//      2) faster to fetch pre-rendered content
//      3) the benefit of not having to first fetch the application code and then fetch client content
//
// A Webpack application will crash if run directly in Node
// Node does not have the capability to resolve require() calls
// It will crash because of how Webpack works: webpack it introduces its own layer above the standard javascript
// Node only knows how to require() javascript modules
// That layer handles all require() calls and enables resolving them
// "require" works on the client-side, because Webpack replaces all the require() calls with `[hash]` file naming feature
// `[hash]` file naming feature makes browser asset caching work correctly
//
// webpack server-side rendering (hot-reloading) won't work with Node
// because When Webpack url-loader finds `require()` calls, it copies the assest to the client build folder
// and name it something like `9059f094ddb49c2b0fa6a254a6ebf2ad.png`
// Webpack uses the `[hash]` file naming feature for assets on the client, which makes browser asset caching work correctly
// that won't work on the server (hot-reloading)(server-side rendering)
// it won't work on the server because Node.js only knows how to "require()" javascript modules
// Node cannot work with webpack's `[hash]` file naming feature
// so Node cannot reference those assets i.e. "<img src={ require('../image.png')}",
// which was transformed to "9059f094ddb49c2b0fa6a254a6ebf2ad.png" in the bundle (i think)
//
// To solve the webpack-to-[hash]-file-bundling-naming-feature,
// "webpack-isomorphic-tools" mimics webpack's require() when running app code on a Node server without Webpack
// "webpack-isomorphic-tools" enables the require() call to return the real path to the image on the disk
// "webpack-isomorphic-tools" accomplishes this through "magic"
// "webpack-isomorphic-tools" enables "require()" calls in Node
// "webpack-isomorphic-tools" enables require() calls (on the server) to return anything (String's, JSON objects)
// "webpack-isomorphic-tools" are required both for development and production
//
// webpack-isomorphic-tools: enables the resolution of require() calls in Node
// webpack-isomorphic-tools: injects a require() layer above the standard javascript in Node
// webpack-isomorphic-tools: enables the compilation of server-side code with Webpack (similiar to the client-side)
//
// For each asset type managed by "webpack-isomorphic-tools" there should be a corresponding in Webpack configuration
//
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// https://survivejs.com/webpack/preface/
// https://survivejs.com/webpack/building/bundle-splitting/
// https://survivejs.com/webpack/styling/loading/
//
// babel-loader only uses the babelrc for cache purposes, it won't interpret any option inside the .babelrc file?
//
// externals - modules that should not be bundled
// When bundling for the backend you don't want to bundle node_modules dependencies
// "webpack-node-externals": exclude node modules in Webpack
//
// Since webpack >= v2.0.0, importing of JSON files will work by default
//
//  Plugins run before Presets.
//  Plugin ordering is first to last.
//  Preset ordering is reversed (last to first)
//
// "babel-plugin-webpack-loaders":
//      (server-side usefulness only?)
//      (does not support "json-loader")
//      (supports "file-loader", "url-loader", "css-loader", "style-loader", "sass-loader", "postcss-loader")
//
// ".babelrc":
//      (plugin && preset instructions for Babel specific to application)
//      ("Babel-register" IS A WAY OF USING Babel !!)
//      (So, "Babel-register" presets/plugins will take precedence over .babelrc !!)
//      ("Babel-loader" presets/plugins take precedence over .babelrc)
//      (https://gist.github.com/rmoorman/94eeed830942758e218d92f15ce58d88)
//
// ".babelrc plugins required for transforming es2015 to ES5 (specific to this application)":
//
//  "preset-react":
//      (enables Babel 6 to support React (Strip flow types and transform JSX))
//
//  "preset-es2015":
//      (enables Babel 6 to support ES2015)
//      (setting module option "false" will not transform ES6 module syntax to another module type (i.e. CommonJS))
//
//  "preset-stage-0":
//      (enables Babel 6 to support changes to the language that havenâ€™t been approved to be part of ES6/ES2015)
//
//  "preset-flow":
//      (Babel preset for all Flow plugins)
//
// "transform-decorators-legacy":
//      (enables use of "@decorators")
//      (Decorators make it possible to annotate and modify classes and properties at design time)
//      (https://github.com/wycats/javascript-decorators)
//
// "transform-regenerator":
//      (enables use of generator functions)
//      (functions which can be paused in the middle, one or many times, and resumed later)
//      (generator functions allow other code to run during paused periods)
//      (https://davidwalsh.name/es6-generators)
//
//  "Redux-saga":
//      (a redux middleware library designed to help handle side effects in a redux app)
//      (It achieves this by leveraging Generators, which allow the writing of asynchronous code that looks synchronous)
//      (the Saga pattern is way a to handle long running transactions with side effects or potential failures)
//      (https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1)
//
// "transform-runtime":
//      (helps avoid duplication of references to helpers and builtins in compiled output)
//      (creates a sandboxed environment for your code)
//
// "transform-es2015-modules-commonjs":
//      (transforms ES2015 modules to CommonJS modules)
//      "es2015":
//            ( export default function () {}; )
//            ( import lib from './lib'; )
//      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//      >>>>>>> transformed to >>>>>>
//      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//       "CommonJS":
//            ( module.exports = function () {}; )
//            ( var lib = require('./lib'); )
//
// "BABEL_DISABLE_CACHE=1":
/       (By default Babel caches compiled files)
//      (so any changes in files processed with loaders will not be visible at subsequent builds)
// 
// "passPerPreset": true 
//      (if true, every preset is applied individually without considering the others (order matters))
//      (https://babeljs.io/docs/plugins/#plugin-preset-ordering)
//
//  "presets":
//      (preset ordering is reversed (applied last to first))
//
//  "babel-register": 
//      ("Babel-register" IS A WAY OF USING Babel !!)
//      (So, "Babel-register" presets/plugins will take precedence over .babelrc !!)
//      (one of the ways you can use Babel is through the require hook)
//      (the require hook will bind itself to NODE's (server-side) require and automatically compile files on the fly)
//      (all subsequent files required by NODE (server-side) with the extensions .es6, .es, .jsx and .js are transformed by Babel)
//      (must include the "https://babeljs.io/docs/usage/polyfill/" separately when using features that require it, like generators ("babel-plugin-transform-regenerator"))
//
//  "babel-node":
//      (transpiles individual files && not their respective require files)
//
//  "start-dev && "start-prod":
//      ("index.js" loaded)
//      "NODE_ENV=development":
//          ("babel-register" used)
//          (all subsequent files required by NODE (server-side) with the extensions .es6, .es, .jsx and .js are transformed by ("babel-register" ("babel")))
//          ("Babel-register" IS A WAY OF USING Babel !!)
//          (So, "Babel-register" presets/plugins will take precedence over .babelrc !!)
//          (specified "plugins" in "index.js > babel-register" are applied to transformation)
//          (going through "./server/server" and initiating "webpack.config.dev.js" (see description below))
//      "NODE_ENV=production":
//          (going through "./build/server/server.bundle" >>> refer to "webpack.config.server.js" (see description below))
//
//  "webpack.config.prod.js":
//      (only used in production)
//      ("babel-loader" using ".babelrc" for all non-node-module ".jsx*$" files)
//
//  "webpack.config.server.js":
//      (only used in production)
//      ("Babel-loader" presets/plugins take precedence over .babelrc)
//      (https://gist.github.com/rmoorman/94eeed830942758e218d92f15ce58d88)
//      ("babelrc === true")(it's not set to "false")
//      ("babel-loader" using ".babelrc" for all non-node-module ".js$" files)
//      ("babel-loader" using additional "query" config for all non-node-module ".js$" files)
//
//  "webpack.config.dev.js":
//      (only used in development)
//      (going through "./server/server" via "index.js")
//      (initiated in "./server/server")
//      ("babel-loader" using ".babelrc" for all non-node-module ".jsx*$" files)
//      (incorporated into "webpackDevMiddleware" && "webpackHotMiddleware")
//
//  "webpack - loading fonts":
//  https://survivejs.com/webpack/loading/fonts/


